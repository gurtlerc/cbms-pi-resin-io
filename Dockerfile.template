# base-image for node on any machine using a template variable,
# see more about dockerfile templates here:http://docs.resin.io/pages/deployment/docker-templates
# Note the node:slim image doesn't have node-gyp
FROM resin/%%RESIN_MACHINE_NAME%%-node:slim

# use apt-get if you need to install dependencies,
# for instance if you need ALSA sound utils, just uncomment the lines below.
RUN apt-get update && apt-get install -yq \
    alsa-utils libasound2-dev nginx adduser libfontconfig && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Defines our working directory in container
WORKDIR /usr/src/app

# Copies the package.json first for better cache on later pushes
COPY package.json package.json

# This install npm dependencies on the resin.io build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
RUN JOBS=MAX npm install --production --unsafe-perm && npm cache clean && rm -rf /tmp/*

# This will copy all files in our root to the working  directory in the container
COPY . ./

# Install cbmsstudio from the debian package
RUN dpkg -i cbms/cbmsstudio_1.3.6.1118_armhf.deb
RUN dpkg -i influxdb/influxdb_0.10.0+dfsg1-1_armhf.deb
RUN dpkg -i grafana/grafana_2.6.0_armhf.deb

ADD start.sh /start.sh
ADD nginx/default /etc/nginx/sites-available/default 
ADD grafana/grafana.ini /etc/grafana/grafana.ini
ADD cbms/menu.json /var/cbms/web/nav/menu.json

RUN systemctl enable grafana-server

# Enable systemd init system in container
ENV INITSYSTEM=on

CMD ["bash", "/start.sh"]

